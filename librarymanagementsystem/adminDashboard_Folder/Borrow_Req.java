
package librarymanagementsystem.adminDashboard_Folder;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import librarymanagementsystem.Db_conn;


public class Borrow_Req extends javax.swing.JFrame {

  
    public Borrow_Req() {
        initComponents();
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back_btn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        request_table = new javax.swing.JTable();
        approve_btn = new javax.swing.JButton();
        decline_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        back_btn.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        back_btn.setText("Back");
        back_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_btnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel1.setText("Manage Requests");

        request_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request ID", "User ID", "Book ID", "Status", "Request Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(request_table);

        approve_btn.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        approve_btn.setText("Approve");
        approve_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approve_btnActionPerformed(evt);
            }
        });

        decline_btn.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        decline_btn.setText("Decline");
        decline_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decline_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(back_btn)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(approve_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(decline_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(back_btn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(approve_btn)
                    .addComponent(decline_btn))
                .addContainerGap(99, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void back_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_btnActionPerformed
        Admin_Dashboard adminDashboard = new Admin_Dashboard();
        adminDashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_back_btnActionPerformed
    
        private void showData() {
        String query = "SELECT * FROM borrow_requests"; 
    try {
        Db_conn db = new Db_conn();
        Connection conn = db.getConnection();
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet result = stmt.executeQuery();

       
        DefaultTableModel model = (DefaultTableModel) request_table.getModel();
        model.setRowCount(0); 

        
        while (result.next()) {
            Object[] row = {
                result.getInt("requestID"), 
                result.getString("userID"),
                result.getString("BookID"),
                result.getString("status"),
                result.getString("requestDate"),
            };
            model.addRow(row);
        }

        result.close();
        stmt.close();
        conn.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error fetching user data: " + e.getMessage());
        e.printStackTrace(); // For debugging
    }
}

    
    private void approve_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approve_btnActionPerformed
        int selectedRow = request_table.getSelectedRow();
        
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this,"Please Select the request!");
            return;
        }
        
        String requestID = request_table.getValueAt(selectedRow, 0).toString();
        String bookID = request_table.getValueAt(selectedRow, 2).toString();
        
        try{
            Db_conn db = new Db_conn();
            Connection conn = db.getConnection();
            
            String updateRequest = "Update borrow_requests set status = 'Approved' where requestID = ?";
            PreparedStatement stmtRequest = conn.prepareStatement(updateRequest);
            stmtRequest.setString(1, requestID);
            stmtRequest.executeUpdate();
            
            String updateBook = "UPDATE books SET status = 'Unavailable' WHERE bookID = ?";
            PreparedStatement stmtBook = conn.prepareStatement(updateBook);
            stmtBook.setString(1, bookID);
            stmtBook.executeUpdate();
            
            stmtRequest.close();
            stmtBook.close();
            conn.close();
            
            
            JOptionPane.showMessageDialog(this, "Request approved successfully!");
            showData(); 
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error approving request!");
        }
    }//GEN-LAST:event_approve_btnActionPerformed

    private void decline_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decline_btnActionPerformed
        int selectedRow = request_table.getSelectedRow();
        
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this,"Please Select the request!");
            return;
        }
        
        String requestID = request_table.getValueAt(selectedRow, 0).toString();
        
        try {
        Db_conn db = new Db_conn();
        Connection conn = db.getConnection();

      
        String updateRequest = "UPDATE borrow_requests SET status = 'Declined' WHERE requestID = ?";
        PreparedStatement stmt = conn.prepareStatement(updateRequest);
        stmt.setString(1, requestID);
        stmt.executeUpdate();

        stmt.close();
        conn.close();

        JOptionPane.showMessageDialog(this, "Request declined successfully!");
        showData(); // Refresh the JTable with updated data
        } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error declining request: " + e.getMessage());
        e.printStackTrace();
        }
    }//GEN-LAST:event_decline_btnActionPerformed
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Borrow_Req.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Borrow_Req.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Borrow_Req.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Borrow_Req.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Borrow_Req().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approve_btn;
    private javax.swing.JButton back_btn;
    private javax.swing.JButton decline_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable request_table;
    // End of variables declaration//GEN-END:variables
}
